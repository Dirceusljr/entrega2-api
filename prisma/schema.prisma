generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          String     @id @default(uuid())
  nome        String     @db.VarChar(100)
  email       String     @unique @db.VarChar(100)
  senha       String     @db.VarChar(100)
  reputacao   Decimal?     @db.Decimal(3, 1)
  usuariosCargos   UsuarioCargo[]
  usuariosPermissoes UsuarioPermissao[]
  livrosDesejados LivroDesejado[]
  livros       Livro[]
  avaliacaoLivros AvaliacaoLivro[]
  reputacoesDe ReputacaoUsuario[] @relation("UsuarioDe")
  reputacoesPara ReputacaoUsuario[] @relation("UsuarioPara")
  trocaPedidosDe TrocaPedido[] @relation("UsuarioDe")
  trocaPedidosPara TrocaPedido[] @relation("UsuarioPara")

  @@map("usuarios")
}

model Cargo {
  id          String        @id @default(uuid())
  nome        String     @unique @db.VarChar(100)
  descricao   String     @db.VarChar(100)
  usuariosCargos   UsuarioCargo[]
  cargosPermissoes CargoPermissao[]

  @@map("cargos")
}

model Permissao {
  id          String        @id @default(uuid())
  nome        String     @unique @db.VarChar(100)
  descricao   String     @db.VarChar(100)
  usuariosPermissoes UsuarioPermissao[]
  cargosPermissoes CargoPermissao[]

  @@map("permissoes")
}

model UsuarioCargo {
  id          String        @id @default(uuid())
  usuarioId   String     @default(uuid())
  cargoId     String
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  cargo       Cargo      @relation(fields: [cargoId], references: [id], onDelete: Cascade)

  @@map("usuarios_cargos")
}

model UsuarioPermissao {
  id          String        @id @default(uuid())
  usuarioId   String     @default(uuid())
  permissaoId String
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  permissao   Permissao  @relation(fields: [permissaoId], references: [id], onDelete: Cascade)

  @@map("usuarios_permissoes")
}

model CargoPermissao {
  id          String        @id @default(uuid())
  cargoId     String
  permissaoId String
  cargo       Cargo      @relation(fields: [cargoId], references: [id], onDelete: Cascade)
  permissao   Permissao  @relation(fields: [permissaoId], references: [id], onDelete: Cascade)

  @@map("cargos_permissoes")
}

model LivroDesejado {
  id          String        @id @default(uuid())
  usuarioId   String     @default(uuid())
  titulo      String     @db.VarChar(200)
  autor       String     @db.VarChar(100)
  linkCapa    String?    @db.VarChar(100)
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("livros_desejados")
}

model Livro {
  id          String        @id @default(uuid())
  titulo      String     @db.VarChar(200)
  autor       String     @db.VarChar(100)
  usuarioId   String     @default(uuid())
  linkCapa    String?    @db.VarChar(100)
  editora     String?    @db.VarChar(100)
  genero      String?    @db.VarChar(100)
  paginas     Int?
  avaliacao   Decimal?     @db.Decimal(3, 1)
  disponibilidade Boolean @default(true)
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  avaliacaoLivros AvaliacaoLivro[]
  trocaPedidosDe TrocaPedido[] @relation("LivroDe")
  trocaPedidosPara TrocaPedido[] @relation("LivroPara")

  @@map("livros")
}

model AvaliacaoLivro {
  id          String        @id @default(uuid())
  livroId     String
  usuarioId   String     @default(uuid())
  avaliacao   Decimal      @db.Decimal(3, 1)
  comentario  String?    @db.VarChar(500)
  livro       Livro      @relation(fields: [livroId], references: [id], onDelete: Cascade)
  usuario     Usuario    @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("avaliacao_livros")
}

model TrocaPedido {
  id              String        @id @default(uuid())
  usuarioDeId     String     @default(uuid())
  livroDeId       String
  usuarioParaId   String     @default(uuid())
  livroParaId     String
  status          String     @default("pendente") @db.VarChar(10)
  criadoEm        DateTime   @default(now())
  atualizadoEm    DateTime   @default(now())
  usuarioDe       Usuario    @relation("UsuarioDe", fields: [usuarioDeId], references: [id], onDelete: Cascade)
  livroDe         Livro      @relation("LivroDe", fields: [livroDeId], references: [id], onDelete: Cascade)
  usuarioPara     Usuario    @relation("UsuarioPara", fields: [usuarioParaId], references: [id], onDelete: Cascade)
  livroPara       Livro      @relation("LivroPara", fields: [livroParaId], references: [id], onDelete: Cascade)
  reputacoes      ReputacaoUsuario[]

  @@map("trocas_pedidos")
}

model ReputacaoUsuario {
  id              String        @id @default(uuid())
  trocaId         String
  usuarioDeId     String     @default(uuid())
  usuarioParaId   String     @default(uuid())
  avaliacao       Decimal      @db.Decimal(3, 1)
  comentario      String?    @db.VarChar(500)
  troca           TrocaPedido @relation(fields: [trocaId], references: [id])
  usuarioDe       Usuario    @relation("UsuarioDe", fields: [usuarioDeId], references: [id], onDelete: Cascade)
  usuarioPara     Usuario    @relation("UsuarioPara", fields: [usuarioParaId], references: [id], onDelete: Cascade)

  @@map("reputacao_usuarios")
}